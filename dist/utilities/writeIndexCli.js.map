{"version":3,"sources":["../../src/utilities/writeIndexCli.js"],"names":["directoryPaths","options","sortedDirectoryPaths","updateIndex","chalk","green","red","recursive","ignoreUnsafe","extensions","_","map","dir","fileName","silent","flatten","uniq","reverse","join","filter","directoryPath","forEach","existingIndexCode","config","siblings","ignoreDirectories","indexCode","banner","indexFilePath","path","resolve","fs","readFileSync","error","writeFileSync","yellow"],"mappings":"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","sourcesContent":["/* eslint-disable import/max-dependencies */\nimport fs from 'fs';\nimport path from 'path';\nimport _ from 'lodash';\nimport chalk from 'chalk';\nimport createIndexCode from './createIndexCode';\nimport validateTargetDirectory from './validateTargetDirectory';\nimport readDirectory from './readDirectory';\nimport readIndexConfig from './readIndexConfig';\nimport sortByDepth from './sortByDepth';\nimport log from './log';\nimport findIndexFiles from './findIndexFiles';\n\nexport default (directoryPaths, options = {}) => {\n  let sortedDirectoryPaths;\n\n  sortedDirectoryPaths = sortByDepth(directoryPaths);\n\n  log('Target directories', sortedDirectoryPaths);\n  if (options.updateIndex) {\n    log('Update index:', options.updateIndex ? chalk.green('true') : chalk.red('false'));\n  } else {\n    log('Recursive:', options.recursive ? chalk.green('true') : chalk.red('false'));\n    log('Ignore unsafe:', options.ignoreUnsafe ? chalk.green('true') : chalk.red('false'));\n    log('Extensions:', chalk.green(options.extensions));\n  }\n\n  if (options.updateIndex || options.recursive) {\n    sortedDirectoryPaths = _.map(sortedDirectoryPaths, (dir) => {\n      return findIndexFiles(dir, {\n        fileName: options.updateIndex ? 'index.js' : '*',\n        silent: options.updateIndex || options.ignoreUnsafe\n      });\n    });\n    sortedDirectoryPaths = _.flatten(sortedDirectoryPaths);\n    sortedDirectoryPaths = _.uniq(sortedDirectoryPaths);\n    sortedDirectoryPaths = sortByDepth(sortedDirectoryPaths);\n\n    log('Updating index files in:', sortedDirectoryPaths.reverse().join(', '));\n  }\n\n  sortedDirectoryPaths = sortedDirectoryPaths.filter((directoryPath) => {\n    return validateTargetDirectory(directoryPath, {silent: options.ignoreUnsafe});\n  });\n\n  _.forEach(sortedDirectoryPaths, (directoryPath) => {\n    let existingIndexCode;\n\n    const config = readIndexConfig(directoryPath);\n\n    const siblings = readDirectory(directoryPath, {\n      config,\n      extensions: options.extensions,\n      ignoreDirectories: options.ignoreDirectories,\n      silent: options.ignoreUnsafe\n    });\n\n    const indexCode = createIndexCode(siblings, {\n      banner: options.banner,\n      config\n    });\n\n    const indexFilePath = path.resolve(directoryPath, 'index.js');\n\n    try {\n      existingIndexCode = fs.readFileSync(indexFilePath, 'utf8');\n\n      /* eslint-disable no-empty */\n    } catch (error) {\n\n    }\n\n    /* eslint-enable no-empty */\n\n    fs.writeFileSync(indexFilePath, indexCode);\n\n    if (existingIndexCode && existingIndexCode === indexCode) {\n      log(indexFilePath, chalk.yellow('[index has not changed]'));\n    } else if (existingIndexCode && existingIndexCode !== indexCode) {\n      log(indexFilePath, chalk.green('[updated index]'));\n    } else {\n      log(indexFilePath, chalk.green('[created index]'));\n    }\n  });\n\n  log('Done');\n};\n"],"file":"writeIndexCli.js"}